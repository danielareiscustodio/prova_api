name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run unit tests
      run: npm test
      env:
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret_key_for_ci

    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret_key_for_ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start server for integration tests
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        PORT: 3000
        JWT_SECRET: test_jwt_secret_key_for_integration

    - name: Run integration tests
      run: npm test
      env:
        NODE_ENV: test
        API_URL: http://localhost:3000
        JWT_SECRET: test_jwt_secret_key_for_integration

    - name: Stop server
      run: pkill -f "node src/server.js" || true

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: npx audit-ci --moderate

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        echo "Building application..."
        # Aqui voc√™ pode adicionar comandos de build se necess√°rio
        npm run test

    - name: Create build artifact
      run: |
        mkdir -p build
        cp -r src build/
        cp package*.json build/
        cp README.md build/ || echo "README.md not found"

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ github.sha }}
        path: build/
        retention-days: 30

  notifications:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan, build]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.integration-test.result == 'success' }}
      run: |
        echo "‚úÖ All tests passed successfully!"
        echo "üöÄ Pipeline completed successfully"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.integration-test.result == 'failure' }}
      run: |
        echo "‚ùå Tests failed!"
        echo "üîß Please check the test results and fix the issues"
        exit 1
